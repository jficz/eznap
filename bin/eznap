#!/usr/bin/env bash

# source: https://github.com/jficz/eznap

appId="cz.jfi.eznap"
appName="eznap"
version="0.4.1"

declare -A _keep
## Default number of snapshots to keep for each label
#
_keep=(
  [frequent]='96'
  [hourly]='48'
  [daily]='14'
  [weekly]='8'
  [monthly]='12'
)

ret=0

usage() {
  # shellcheck disable=SC2317 # somehow shellcheck thinks this is unreachable
  printf -v labels '%s | ' "${!_keep[@]}"
  # shellcheck disable=SC2317 # somehow shellcheck thinks this is unreachable
  cat << EOF
eznap v${version} (c) 2023 jficz
Usage: $0 < ${labels%|*}> | < trigger >
Retun codes: 0 - success
             1 - fatal failure, no changes made
             2 - partial failure, some changes possibly made
EOF
}

err() {
  echo E: "$*" >&2
}

failcode() {
  ret=$1
  shift
  err "$*"
  exit "$ret"
}

fail() {
  failcode 1 "$*"
}

zdate() {
  TZ=UTC printf "%($1)T"
}

zfsList() {
  type=$1
  props=$2
  opts=$3
  dataset=$4

  # shellcheck disable=SC2086 # we _want_ $opts to be word-splitted
  LC_ALL=C $_zfs list -H \
  -t "$type" \
  -o "$props" \
  $opts \
  "$dataset" \
  2>&1

  # shellcheck disable=SC2181 # this is more readable
  [[ $? -gt 0 ]] && fail "Error enumerating zfs datasets."
}

snapsToDestroy() {
  readarray -tn 0 line

  ## remove first $1 lines from output; that is, remove all snapshots
  ## that are to be kept and print only snapshots that should be destroyed,
  ## assuming they are sorted by date, oldest last
  #
  printf '%s\n' "${line[@]:$1}"
}


_zfs=$(PATH=$PATH:/usr/sbin:/sbin:/usr/bin:/bin command -v zfs 2> /dev/null)
# shellcheck disable=SC2181 # this is more readable
[[ $? -gt 0 ]] && fail "'zfs' command not found."

[[ -z "$1" ]] && fail "Missing label."

[[ -z "${_keep[$1]}" && "$1" != "trigger" ]] && fail "Wrong label."

label=$1

if [[ "$label" = "trigger" ]]; then
  declare -A _interval
  _frequent_default=$(( 15 * 60 ))
  _interval=(
    [hourly]=$(( 60 * 60 ))
    [daily]=$(( 60 * 60 * 24 ))
    [weekly]=$(( 60 * 60 * 24 * 7 ))
    [monthly]=$(( 60 * 60 * 24 * 30 ))
  )

  declare -a _actions

  labels=( "${!_keep[@]}" )

  DATASETS=$(zfsList filesystem,volume name,com.sun:auto-snapshot,${appId}:frequency -p)
  # shellcheck disable=SC2086 # we _want_ word splitting here (<<< $DATASETS at the end of the loop)
  while read -r dataset snap freq; do
    [[ "${snap,,}" != "true" ]] && continue

    _now=$(zdate '%s')
  
    if [[ $freq =~ ^[0-9]+$ ]]; then
      _interval[frequent]=$(( freq * 60 ))
    else
      _interval[frequent]=$_frequent_default
    fi

    SNAPS=$(zfsList snap name,${appId}:label,creation '-p -S creation' "$dataset")
    # shellcheck disable=SC2206 # we do _not_ want to prevent word splitting
    localLabels=( "${labels[@]}" )
    # shellcheck disable=SC2086 # we _want_ word splitting here (<<< $SNAPS at the end)
    while read -r sname slabel screation; do
      if [[ " ${localLabels[*]} " == *" $slabel "* ]]; then
        # shellcheck disable=SC2206 # we do _not_ want to prevent word splitting
        localLabels=( ${localLabels[*]/$slabel} )
        if [[ $(( _now - screation )) -ge ${_interval[$slabel]} ]]; then
          # shellcheck disable=SC2206 # we do _not_ want to prevent word splitting
          labels=( ${labels[*]/$slabel} )
          _actions+=( "$slabel" )
        fi
      fi
      [[ ${#labels[*]} -eq 0 ]] && break
    done <<< $SNAPS
  done <<< $DATASETS

  for _action in "${_actions[@]}"; do
    $0 "$_action"
  done

fi

## Cannot use pipe `zfsList | while` because pipe creates new shell for the `which` part
## which scopes all vars to that subshell only
DATASETS=$(zfsList filesystem,volume name,com.sun:auto-snapshot,com.sun:auto-snapshot:"$label")
    # shellcheck disable=SC2086 # we _want_ word splitting here (<<< $DATASETS at the end)
while read -r dataset snap keep; do

  case "${keep,,}" in
  ## '-' (not set) and 'true' means use default retention
    "-" | "true")  keep=${_keep[$label]}
                   ;;
  ## anything else but a positive integer means no snapshot
    '' | *[!0-9]*) snap=false
                   ;;
  esac

  if [[ "${snap,,}" = "true" ]]; then

    if [[ $keep -gt 0 ]]; then
      _date=$(zdate '%F_%TZ')
      SNAPPROPS="-o ${appId}:label=$label"
      SNAPNAME="${dataset}@${appName}-${label}_${_date}"
      # shellcheck disable=SC2086 # we do _not_ prevent word splitting here
      if ! $_zfs snapshot $SNAPPROPS "$SNAPNAME" 2>/dev/null; then
        err "Create snapshot failed for '$SNAPNAME'."
        ret=2
      fi
    fi

    SNAPS=$(zfsList snapshot name,${appId}:label '-S creation' "$dataset" | snapsToDestroy "$keep")
    # shellcheck disable=SC2086 # we _want_ word splitting here (<<< $SNAPS at the end)
    while read -r sname slabel; do
      if [[ "${sname%%@*}" = "$dataset" && "$slabel" = "$label" ]]; then
        if ! $_zfs destroy "$sname"; then
          err "Destroy snapshot failed for '$sname'."
          ret=2
        fi
      fi
    done <<< $SNAPS
  
  fi
done <<< $DATASETS

exit $ret
